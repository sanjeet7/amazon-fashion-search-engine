# ===================================
# Amazon Fashion Search Engine
# Docker Compose Configuration
# ===================================

version: '3.8'

services:
  # ===================================
  # Data Pipeline Service (Optional)
  # ===================================
  data-pipeline:
    build:
      context: .
      dockerfile: services/data-pipeline/Dockerfile
    container_name: fashion-search-data-pipeline
    profiles: ["rebuild", "full-stack"]
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRATIFIED_SAMPLE_SIZE=${STRATIFIED_SAMPLE_SIZE:-50000}
      - EMBEDDING_BATCH_SIZE=${EMBEDDING_BATCH_SIZE:-1000}
      - LLM_CONCURRENT_LIMIT=${LLM_CONCURRENT_LIMIT:-10}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - pipeline_logs:/app/logs
    command: ["--rebuild"]
    restart: "no"
    networks:
      - fashion-search

  # ===================================
  # Search API Service (Core)
  # ===================================
  search-api:
    build:
      context: .
      dockerfile: services/search-api/Dockerfile
    container_name: fashion-search-api
    profiles: ["api", "full-stack", ""]  # Default profile
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./data:/app/data:ro  # Read-only data access
      - api_logs:/app/logs
    depends_on:
      data-pipeline:
        condition: service_completed_successfully
        required: false
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - fashion-search

  # ===================================
  # Frontend Service (Core)
  # ===================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fashion-search-frontend
    profiles: ["frontend", "full-stack", ""]  # Default profile
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      search-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fashion-search

  # ===================================
  # Development Services (Optional)
  # ===================================
  search-api-dev:
    build:
      context: .
      dockerfile: services/search-api/Dockerfile
    container_name: fashion-search-api-dev
    profiles: ["dev"]
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data:ro
      - ./services/search-api:/app/services/search-api
      - ./shared:/app/shared
      - api_logs:/app/logs
    command: ["--reload", "--log-level", "DEBUG"]
    restart: unless-stopped
    networks:
      - fashion-search

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: deps
    container_name: fashion-search-frontend-dev
    profiles: ["dev"]
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    depends_on:
      - search-api-dev
    restart: unless-stopped
    networks:
      - fashion-search

# ===================================
# Networks
# ===================================
networks:
  fashion-search:
    driver: bridge
    name: fashion-search-network

# ===================================
# Volumes
# ===================================
volumes:
  pipeline_logs:
    name: fashion-search-pipeline-logs
  api_logs:
    name: fashion-search-api-logs

# ===================================
# Usage Examples:
# 
# Quick Start (Recommended):
#   docker-compose up
#
# Rebuild Data First:
#   docker-compose --profile rebuild up
#
# Development Mode:
#   docker-compose --profile dev up
#
# Full Stack:
#   docker-compose --profile full-stack up
#
# API Only:
#   docker-compose --profile api up search-api
# ===================================